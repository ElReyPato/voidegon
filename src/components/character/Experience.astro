---
interface Props {
	race: string;
	rol: string;
	exp: number;
	start?: number;
}

const { race, rol, exp, start = 2 } = Astro.props;

let porcentaje = 0;
let level = 0;
let expUp = 0;

const expThresholds = [
	0, 300, 900, 2700, 6500, 14000, 23000, 34000, 48000, 64000, 85000, 100000,
	120000, 140000, 165000, 195000, 225000, 265000, 305000, 355000,
];

function medirXP(exp: number) {
	while (exp >= expThresholds[level]) {
		level++;
	}

	expUp = expThresholds[level] - expThresholds[level - 1];

	return { level, expUp };
}

function calcularPorcentaje(exp: number) {
	if (exp === expThresholds[level - 1]) {
		porcentaje = 0;
	} else {
		const expEnNivel = exp - expThresholds[level - 1];
		porcentaje = Math.floor((expEnNivel / expUp) * 100);
	}

	return porcentaje;
}

medirXP(exp);
calcularPorcentaje(exp);
console.log(porcentaje);
---

<article class='grid grid-cols-6 items-center gap-2 bg-[--gray] rounded-lg p-2'>
	<a href={`/extras/race/${race.toLowerCase()}`}>
		<section class={`col-span-1 row-start-1`} id='race'>
			<h6 class='text-[--title] font-[unbounded]'>{race}</h6>
		</section>
	</a>

	<section
		class={`col-span-4 font-[caveat] font-bold text-[--white] row-start-1`}
		style={`grid-column-start: ${start};`}
		id='exp'
	>
		<div class='flex justify-center items-center'>
			<span class='text-base mx-4 w-20'>Nivel {level}</span>
			<div class='w-full bg-[--gray] rounded-full h-1.5'>
				<div
					class='h-1.5 rounded-full'
					style={`width: ${porcentaje}%`}
					id='pulse'
				>
				</div>
			</div>
			<span class='text-base mx-4 w-20'>{exp}/{expThresholds[level]}</span
			>
		</div>
	</section>

	<a href={`/extras/rol/${rol.toLowerCase()}`}>
		<section class={`col-span-1 md:row-start-1 row-start-2`} id='rol'>
			<h6 class='text-[--subtitle] font-[unbounded]'>{rol}</h6>
		</section>
	</a>
</article>

<style>
	section {
		background-color: var(--dark);
		border-radius: 0.5rem;
		padding: 0.5rem;

		text-align: center;

		transition: all 100ms ease;
		cursor: default;
	}
	section:hover {
		box-shadow: 0px 20px 20px -10px rgba(0, 0, 0, 0.1);
	}

	a > section {
		cursor: pointer;
	}
	a:hover > section {
		scale: 1.01;
		background-color: var(--black);
	}

	h6 {
		font-weight: bold;
	}

	/** MEDIA QUERYS */
	@media (max-width: 1024px) {
		article {
			display: flex;
			flex-direction: column;
		}
		section {
			width: 100%;
		}
		#race {
			grid-row-start: 1;
		}
		#rol {
			grid-row-start: 2;
		}
		#exp {
			order: 1;
		}
	}

	/** Animation */
	@keyframes cambioDeColor {
		0% {
			background-color: var(--date);
		}
		50% {
			background-color: var(--gray);
		}
		100% {
			background-color: var(--date);
		}
	}
	@keyframes cargarExp {
		0% {
			width: 0;
		}
	}

	#pulse {
		background: linear-gradient(
			90deg,
			var(--subtitle) 50%,
			var(--date) 100%
		);
		animation: cargarExp 5s forwards ease-in-out;
	}
</style>
